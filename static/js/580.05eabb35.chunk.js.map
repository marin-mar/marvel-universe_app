{"version":3,"file":"static/js/580.05eabb35.chunk.js","mappings":"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","sources":["Components/ErrorBoundary.js","Components/ErrorMessage.js","Pages/SinglePage.js","services/MarvelService.js","hooks/http.hook.js","Components/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { Component } from 'react';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import './ErrorMessage.scss';\r\nimport errorMsgImg from './ErrorMessage.png';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <div className=\"error-message\">\r\n      <img className=\"error-message__icon\" src={errorMsgImg} alt=\"error - try again later\" width={100} height={100} />\r\n      <p className=\"error-message__text\">something went wrong... try again later</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\nimport useMarvelService from '../services/MarvelService';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport setContent from '../utils/setContent';\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  const { id } = useParams();\r\n  const [data, setData] = useState(null);\r\n  const { clearError, getComic, getCharacter, process, setProcess } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n  }, [id]);\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n    // eslint-disable-next-line default-case\r\n    switch (dataType) {\r\n      case 'comic':\r\n        getComic(id).then(onDataLoaded).then(() => {setProcess('confirmed');});\r\n        break;\r\n      case 'char':\r\n        getCharacter(id).then(onDataLoaded).then(() => {setProcess('confirmed');});\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  return (\r\n    <HelmetProvider>\r\n      <Helmet>\r\n        <title>{data ? data.title || data.name : 'Marvel Single Page'}</title>\r\n        <meta name=\"description\" content={data ? data.description : 'Marvel Single Page'} />\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        {setContent(process, Component, data)}\r\n      </ErrorBoundary>\r\n    </HelmetProvider>\r\n  );\r\n};\r\n\r\nexport default SinglePage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError, process, setProcess } = useHttp();\r\n\r\n  const apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const apiKey = 'apikey=fdc3403625ab83ef45aae10672f12243';\r\n  // const apiKey = 'apikey=fdc372f12243';\r\n  let baseCharOffset = 0;\r\n  let baseComicOffset = 0;\r\n  let character = [];\r\n  let comics = [];\r\n\r\n  const getAllCharacters = async (limit = 100, offset = baseCharOffset) => {\r\n    const res = await request(`${apiBase}characters?offset=${offset}&limit=${limit}&${apiKey}`);\r\n\r\n    res.data.results.forEach((item) => {\r\n      baseCharOffset++;\r\n      if (item.thumbnail.path !== 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available') {\r\n        character.push(item);\r\n      }\r\n    });\r\n    return character.map(transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (limit = 100, offset = baseComicOffset) => {\r\n    const res = await request(\r\n      `${apiBase}comics?dateDescriptor=thisMonth&orderBy=issueNumber&limit=${limit}&offset=${offset}&${apiKey}`\r\n    );\r\n    res.data.results.forEach((item) => {\r\n      baseComicOffset++;\r\n      if (item.thumbnail.path !== 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available') {\r\n        comics.push(item);\r\n      }\r\n    });\r\n    return comics.map(transformComics);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}characters/${id}?${apiKey}`);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (charName) => {\r\n    const res = await request(`${apiBase}characters?name=${charName}&${apiKey}`);\r\n    // return transformCharacter(res.data.results[0]);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name || 'Character',\r\n      description: character.description || 'There is no description',\r\n      thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    };\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n      setLoading(true);\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        // setProcess('confirmed');\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        setProcess('error');\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { loading, request, error, clearError, process, setProcess };\r\n};\r\n","import './Skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n  return (\r\n    <div className=\"skeleton\">\r\n      <h2 className=\"skeleton__title\">Please select a character from the list on the left to view the information</h2>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__img\"></div>\r\n        <div className=\"skeleton__name\"></div>\r\n      </div>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__text\"></div>\r\n      </div>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__text\"></div>\r\n      </div>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__text\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n","import Spinner from '../Components/Spinner';\r\nimport ErrorMessage from '../Components/ErrorMessage';\r\nimport Skeleton from '../Components/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;"],"names":["ErrorBoundary","state","error","errorInfo","console","log","this","setState","props","children","Component","className","src","errorMsgImg","alt","width","height","dataType","id","useParams","useState","data","setData","useMarvelService","clearError","getComic","getCharacter","process","setProcess","useEffect","updateData","then","onDataLoaded","title","name","content","description","setContent","loading","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","apiBase","apiKey","baseCharOffset","baseComicOffset","character","comics","getAllCharacters","limit","offset","results","forEach","item","thumbnail","path","push","map","transformCharacter","getAllComics","transformComics","res","getCharacterByName","charName","extension","homepage","urls","wiki","items","pageCount","language","textObjects","price","prices","Spinner","ErrorMessage"],"sourceRoot":""}