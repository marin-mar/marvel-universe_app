{"version":3,"file":"static/js/609.9ae86eda.chunk.js","mappings":"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","sources":["Components/BannerCharacter.js","Components/BannerAd.js","Components/Banner.js","Components/Button.js","Components/ErrorBoundary.js","Components/ErrorMessage.js","Components/CharacterCard.js","Components/CharacterList.js","Components/CharacterDescription.js","hooks/usePrevious.hook.js","Components/CharacterSearch.js","Pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","Components/Skeleton.js","utils/setContent.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../services/MarvelService';\r\nimport Spinner from './Spinner';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport Button from './Button';\r\n\r\nimport './BannerCharacter.scss';\r\n\r\nconst BannerCharacter = () => {\r\n  const [character, setCharacter] = useState({});\r\n  const { loading, error, getAllCharacters, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateCharacter();\r\n\r\n    // const timerId = setInterval(updateCharacter, 60000);\r\n\r\n    // return () => {\r\n    //   clearInterval(timerId);\r\n    // }\r\n  }, []);\r\n\r\n  const onCharacterLoaded = (character) => {\r\n    setCharacter(character);\r\n  };\r\n\r\n  const updateCharacter = () => {\r\n    let charactersId = [];\r\n    let id;\r\n\r\n    clearError();\r\n\r\n    getAllCharacters().then((res) => {\r\n      res.forEach((item) => {\r\n        if (item.thumbnail !== 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n          charactersId.push(item.id);\r\n        }\r\n      });\r\n      id = charactersId.sort()[Math.floor(Math.random() * charactersId.length)];\r\n      getCharacter(id).then(onCharacterLoaded);\r\n    });\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error) ? <CharacterView {...character} /> : null;\r\n\r\n  return (\r\n    <div className=\"banner\">\r\n      <div className=\"col banner__random\">\r\n        <p className=\"banner__text\">Random character for today:</p>\r\n        <p className=\"banner__text\">Do you want to know him better?</p>\r\n      </div>\r\n      <div className=\"col banner__main\">\r\n        <div className=\"banner-character\">\r\n          {errorMessage}\r\n          {spinner}\r\n          {content}\r\n        </div>\r\n      </div>\r\n      <div className=\"col banner__try\">\r\n        <p className=\"banner__text\">Or choose another one</p>\r\n        <div className=\"banner__buttons\">\r\n          <Button\r\n            buttonClasses={'banner__button button--accent button--dark-bg'}\r\n            buttonName=\"Try it\"\r\n            onClick={updateCharacter}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CharacterView = (character) => {\r\n  let { name, description, thumbnail, homepage, wiki } = character;\r\n\r\n  if (!name) {\r\n    name = 'There is no name yet';\r\n  }\r\n\r\n  if (!description) {\r\n    description = 'There is no description yet';\r\n  }\r\n\r\n  if (description.length > 200) {\r\n    description = description.slice(0, 200) + '...';\r\n  }\r\n\r\n  if (!thumbnail) {\r\n    thumbnail = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <img className=\"banner-character__img\" src={thumbnail} alt={name} width={200} height={200} />\r\n      <div className=\"banner-character__info\">\r\n        <h2 className=\"banner-character__name\">{name}</h2>\r\n        <p className=\"banner-character__description\">{description}</p>\r\n        <div className=\"banner-character__buttons\">\r\n          <Button\r\n            buttonClasses={'banner-character__button button--accent'}\r\n            buttonName=\"Homepage\"\r\n            buttonUrl={homepage}\r\n          />\r\n          <Button buttonClasses={'banner-character__button'} buttonName=\"Wiki\" buttonUrl={wiki} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BannerCharacter;","import bannerAddLeftImg from '../Img/avengers.png';\r\nimport bannerAddRightImg from '../Img/avengers_logo.png';\r\n\r\nimport './BannerAd.scss';\r\n\r\nconst BannerAd = (props) => {\r\n  return (\r\n    <div className=\"banner banner--ad\">\r\n      <img className=\"banner__img\" src={bannerAddLeftImg} alt=\"avengers\" width={152} height={100} />\r\n      <div className=\"banner__info\">\r\n        <h2 className=\"banner__text\">\r\n          New comics every week!\r\n          <br />\r\n          Stay tuned!\r\n        </h2>\r\n      </div>\r\n      <img className=\"banner__img\" src={bannerAddRightImg} alt=\"avengers logo\" width={133} height={100} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BannerAd;\r\n","import BannerCharacter from './BannerCharacter';\r\nimport BannerAd from './BannerAd';\r\n\r\nimport './Banner.scss';\r\n\r\nconst Banner = (props) => {\r\n  if (props.bannerCharacter) {\r\n    return <BannerCharacter />;\r\n  } else {\r\n    return <BannerAd />;\r\n  }\r\n};\r\n\r\nexport default Banner;\r\n","import './Button.scss';\r\n\r\nconst Button = (props) => {\r\n  const { buttonClasses, buttonName, buttonUrl, onClick, disabled, style, type } = props;\r\n\r\n  if (buttonUrl) {\r\n    return (\r\n      <a\r\n        className={'button ' + buttonClasses}\r\n        href={buttonUrl}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        disabled={disabled}\r\n        style={style}>\r\n        {buttonName}\r\n      </a>\r\n    );\r\n  } else {\r\n    return (\r\n      <button type={type ? type : \"button\"} className={'button ' + buttonClasses} onClick={onClick} disabled={disabled} style={style}>\r\n        {buttonName}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Button;\r\n","import { Component } from 'react';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import './ErrorMessage.scss';\r\nimport errorMsgImg from './ErrorMessage.png';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <div className=\"error-message\">\r\n      <img className=\"error-message__icon\" src={errorMsgImg} alt=\"error - try again later\" width={100} height={100} />\r\n      <p className=\"error-message__text\">something went wrong... try again later</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import './CharacterCard.scss';\r\n\r\nconst CharacterCard = (props) => {\r\n  let { cardClass, name, thumbnail } = props;\r\n\r\n  if (cardClass) {\r\n    cardClass += ' character-card';\r\n  } else {\r\n    cardClass = 'character-card';\r\n  }\r\n\r\n  return (\r\n    <div className={cardClass}>\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"character card img\"\r\n        className=\"character-card__img\"\r\n        width={200}\r\n        height={200}\r\n      />\r\n      <span className=\"character-card__spacer\"></span>\r\n      <h3 className=\"character-card__title\">{name}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterCard;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nimport CharacterCard from './CharacterCard';\r\nimport Button from './Button';\r\nimport useMarvelService from '../services/MarvelService';\r\nimport Spinner from './Spinner';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nimport './CharacterList.scss';\r\n\r\nconst CharacterList = (props) => {\r\n  const [charactersList, setCharactersList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(0);\r\n  const [charactersEnded, setCharactersEnded] = useState(false);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelService();\r\n  const itemRefs = useRef([]);\r\n\r\n  useEffect(() => {\r\n    onRequestList(true);\r\n  }, []);\r\n\r\n  const onRequestList = (initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters().then(onCharactersLoaded);\r\n  };\r\n\r\n  const onCharactersLoaded = (newCharactersList) => {\r\n    let ended = false;\r\n    if (newCharactersList.length < offset) {\r\n      ended = true;\r\n    }\r\n\r\n    setCharactersList((charactersList) => [...charactersList, ...newCharactersList]);\r\n    setNewItemLoading((newItemLoading) => false);\r\n    setOffset((offset) => offset + 6);\r\n    setCharactersEnded((charactersEnded) => ended);\r\n  };\r\n\r\n  const onFocusItem = (id) => {\r\n    itemRefs.current.forEach((item) => {\r\n      item.childNodes[0].classList.remove('active');\r\n    });\r\n    itemRefs.current[id].childNodes[0].classList.add('active');\r\n    itemRefs.current[id].focus();\r\n  };\r\n\r\n  const renderItems = (charactersList) => {\r\n    let items = charactersList.slice(0, offset).map((item, i) => {\r\n      return (\r\n        <li\r\n          className=\"character-list__item\"\r\n          key={item.id}\r\n          tabIndex={0}\r\n          ref={(el) => (itemRefs.current[i] = el)}\r\n          onClick={() => {\r\n            props.onSelectedCharacterId(item.id);\r\n            onFocusItem(i);\r\n          }}\r\n          onKeyPress={(e) => {\r\n            if (e.key === ' ' || e.key === 'Enter') {\r\n              props.onSelectedCharacterId(item.id);\r\n              onFocusItem(i);\r\n            }\r\n          }}>\r\n          <CharacterCard name={item.name} thumbnail={item.thumbnail} />\r\n        </li>\r\n      );\r\n    });\r\n    return (\r\n      <>\r\n        <ul className=\"character-list\">{items}</ul>\r\n        \r\n      </>\r\n    );\r\n  };\r\n\r\n  const items = renderItems(charactersList);\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      {items}\r\n      {errorMessage}\r\n      {spinner}\r\n      {!items ? null : (\r\n        <Button\r\n          buttonClasses={'character-list__button button--accent'}\r\n          buttonName=\"Load more\"\r\n          disabled={newItemLoading}\r\n          style={{ display: charactersEnded ? 'none' : 'block' }}\r\n          onClick={onRequestList}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterList;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Button from './Button';\r\nimport useMarvelService from '../services/MarvelService';\r\nimport usePrevious from '../hooks/usePrevious.hook';\r\nimport setContent from '../utils/setContent';\r\n\r\nimport './CharacterDescription.scss';\r\n\r\nconst CharacterDescription = (props) => {\r\n  const [character, setCharacter] = useState(null);\r\n\r\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n  const onCharacterLoaded = (character) => {\r\n    setCharacter(character);\r\n  };\r\n\r\n  const updateCharacter = () => {\r\n    if (!props.selectedCharacterId) {\r\n      return;\r\n    }\r\n    clearError();\r\n    getCharacter(props.selectedCharacterId).then(onCharacterLoaded).then(() => {setProcess('confirmed');});\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateCharacter();\r\n  }, []);\r\n\r\n  const prevSelectedCharacterId = usePrevious(props.selectedCharacterId);\r\n\r\n  useEffect(() => {\r\n    if (props.selectedCharacterId !== prevSelectedCharacterId) {\r\n      updateCharacter();\r\n    }\r\n    updateCharacter();\r\n  }, [props.selectedCharacterId]);\r\n\r\n  return (\r\n    <div className=\"character-description\">\r\n      {setContent(process, CharacterView, character)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CharacterView = ({ data }) => {\r\n  let { name, description, thumbnail, homepage, wiki, comics } = data;\r\n  comics = comics.length > 5 ? comics.slice(0, 5) : comics;\r\n\r\n  if (description.length > 200) {\r\n    description = description.slice(0, 200) + '...';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <img className=\"character-description__img\" src={thumbnail} alt={name} width={200} height={200} />\r\n        <div className=\"col\">\r\n          <h2 className=\"character-description__name\">{name}</h2>\r\n          <div className=\"character-description__buttons\">\r\n            <Button\r\n              buttonClasses={'character-description__button button--accent'}\r\n              buttonName=\"Homepage\"\r\n              buttonUrl={homepage}\r\n            />\r\n            <Button buttonClasses={'character-description__button'} buttonName=\"Wiki\" buttonUrl={wiki} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <p className=\"character-description__text\">{description}</p>\r\n      </div>\r\n      <div className=\"col\">\r\n        <h3 className=\"character-description__comics\">Comics:</h3>\r\n        <ul className=\"character-description__comics-list\">\r\n          {comics.length > 0 ? null : 'There is no comics with this character'}\r\n          {comics.map((item, i) => {\r\n            return (\r\n              <li className=\"character-description__comics-item\" key={i}>\r\n                {item.name}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CharacterDescription;\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport default function usePrevious (value) {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    }, [value]);\r\n\r\n    return ref.current;\r\n  };","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport Button from './Button';\r\nimport useMarvelService from '../services/MarvelService';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport Spinner from './Spinner';\r\n\r\nimport './CharacterSearch.scss';\r\n\r\nconst CharacterSearch = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const onUpdateChar = (charName) => {\r\n    clearError();\r\n    getCharacterByName(charName).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const result = !char ? null : char.length > 0 ? (\r\n    <div className=\"search__message--success\">\r\n      <h3 className=\"search__text\">There is! Visit {char[0].name} page?</h3>\r\n      <Link to={`/characters/${char[0].id}`}>\r\n        <Button buttonClasses={'search__button button--medium'} buttonName=\"To page\" />\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"search__message--error\">\r\n      <h3 className=\"search__text\">The character was not found. Check the name and try again</h3>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"search\">\r\n      <h2 className=\"search__title\">Or find a character by name:</h2>\r\n\r\n      <Formik\r\n        initialValues={{ charName: '' }}\r\n        validationSchema={yup.object({\r\n          charName: yup.string().required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          onUpdateChar(charName);\r\n        }}>\r\n        <Form className=\"search__form\">\r\n          <Field className=\"search__input\" type=\"text\" id=\"charName\" name=\"charName\" placeholder=\"Enter name\" />\r\n          <Button buttonClasses={'search__button button--accent'} buttonName=\"Find\" type=\"submit\" disabled={loading} />\r\n          <FormikErrorMessage name=\"charName\">\r\n            {(msg) => (\r\n              <div className=\"search__message--error\">\r\n                <h3 className=\"search__text\">{msg}</h3>\r\n              </div>\r\n            )}\r\n          </FormikErrorMessage>\r\n        </Form>\r\n      </Formik>\r\n      {errorMessage}\r\n      {spinner}\r\n      {result}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterSearch;\r\n","import { useState } from 'react';\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport Banner from '../Components/Banner';\r\nimport CharacterList from '../Components/CharacterList';\r\nimport CharacterDescription from '../Components/CharacterDescription';\r\nimport CharacterSearch from '../Components/CharacterSearch';\r\n\r\nconst MainPage = () => {\r\n  const [selectedCharacterId, setSelectedCharacterId] = useState(null);\r\n\r\n  const onSelectedCharacterId = (id) => {\r\n    setSelectedCharacterId((selectedCharacterId) => id);\r\n  };\r\n\r\n  return (\r\n    <HelmetProvider>\r\n      <Helmet>\r\n        <title>Marvel Universe inform portal | MainPage</title>\r\n        <meta name=\"description\" content=\"Marvel Universe inform portal | MainPage\" />\r\n      </Helmet>\r\n      <div className=\"banners\">\r\n        <ErrorBoundary>\r\n          <Banner bannerCharacter />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <div className=\"characters\">\r\n        <ErrorBoundary>\r\n          <CharacterList onSelectedCharacterId={onSelectedCharacterId} />\r\n        </ErrorBoundary>\r\n        <div className=\"description\">\r\n          <ErrorBoundary>\r\n            <CharacterDescription selectedCharacterId={selectedCharacterId} />\r\n            <CharacterSearch />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </HelmetProvider>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError, process, setProcess } = useHttp();\r\n\r\n  const apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const apiKey = 'apikey=fdc3403625ab83ef45aae10672f12243';\r\n  // const apiKey = 'apikey=fdc372f12243';\r\n  let baseCharOffset = 0;\r\n  let baseComicOffset = 0;\r\n  let character = [];\r\n  let comics = [];\r\n\r\n  const getAllCharacters = async (limit = 100, offset = baseCharOffset) => {\r\n    const res = await request(`${apiBase}characters?offset=${offset}&limit=${limit}&${apiKey}`);\r\n\r\n    res.data.results.forEach((item) => {\r\n      baseCharOffset++;\r\n      if (item.thumbnail.path !== 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available') {\r\n        character.push(item);\r\n      }\r\n    });\r\n    return character.map(transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (limit = 100, offset = baseComicOffset) => {\r\n    const res = await request(\r\n      `${apiBase}comics?dateDescriptor=thisMonth&orderBy=issueNumber&limit=${limit}&offset=${offset}&${apiKey}`\r\n    );\r\n    res.data.results.forEach((item) => {\r\n      baseComicOffset++;\r\n      if (item.thumbnail.path !== 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available') {\r\n        comics.push(item);\r\n      }\r\n    });\r\n    return comics.map(transformComics);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}characters/${id}?${apiKey}`);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (charName) => {\r\n    const res = await request(`${apiBase}characters?name=${charName}&${apiKey}`);\r\n    // return transformCharacter(res.data.results[0]);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name || 'Character',\r\n      description: character.description || 'There is no description',\r\n      thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    };\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n      setLoading(true);\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        // setProcess('confirmed');\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        setProcess('error');\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { loading, request, error, clearError, process, setProcess };\r\n};\r\n","import './Skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n  return (\r\n    <div className=\"skeleton\">\r\n      <h2 className=\"skeleton__title\">Please select a character from the list on the left to view the information</h2>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__img\"></div>\r\n        <div className=\"skeleton__name\"></div>\r\n      </div>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__text\"></div>\r\n      </div>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__text\"></div>\r\n      </div>\r\n      <div className=\"skeleton__row\">\r\n        <div className=\"skeleton__text\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n","import Spinner from '../Components/Spinner';\r\nimport ErrorMessage from '../Components/ErrorMessage';\r\nimport Skeleton from '../Components/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;"],"names":["CharacterView","character","name","description","thumbnail","homepage","wiki","length","slice","className","src","alt","width","height","Button","buttonClasses","buttonName","buttonUrl","useState","setCharacter","useMarvelService","loading","error","getAllCharacters","getCharacter","clearError","useEffect","updateCharacter","onCharacterLoaded","id","charactersId","then","res","forEach","item","push","sort","Math","floor","random","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","props","bannerAddLeftImg","bannerAddRightImg","bannerCharacter","disabled","style","type","href","target","rel","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","errorMsgImg","cardClass","charactersList","setCharactersList","newItemLoading","setNewItemLoading","offset","setOffset","charactersEnded","setCharactersEnded","itemRefs","useRef","onRequestList","initial","onCharactersLoaded","newCharactersList","ended","onFocusItem","current","childNodes","classList","remove","add","focus","items","map","i","tabIndex","ref","el","onSelectedCharacterId","onKeyPress","e","key","renderItems","display","data","comics","process","setProcess","selectedCharacterId","prevSelectedCharacterId","value","usePrevious","setContent","char","setChar","getCharacterByName","onCharLoaded","result","to","initialValues","charName","validationSchema","yup","required","onSubmit","onUpdateChar","placeholder","msg","setSelectedCharacterId","Banner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","apiBase","apiKey","baseCharOffset","baseComicOffset","limit","results","path","transformCharacter","getAllComics","transformComics","getComic","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}